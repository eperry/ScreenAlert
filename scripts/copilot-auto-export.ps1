# Copilot Chat Auto-Export Script
# This script monitors for VS Code chat data and automatically exports it to the repository

param(
    [string]$RepoPath = "c:\Users\Ed\OneDrive\Documents\Development\ScreenAlert",
    [string]$ChatDir = "docs\copilot-chats",
    [int]$IntervalMinutes = 30
)

# Configure paths
$ChatDocsPath = Join-Path $RepoPath $ChatDir
$LogFile = Join-Path $ChatDocsPath "auto-export.log"

# Ensure chat directory exists
if (-not (Test-Path $ChatDocsPath)) {
    New-Item -ItemType Directory -Path $ChatDocsPath -Force
}

function Write-Log {
    param([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$Timestamp - $Message" | Out-File -FilePath $LogFile -Append
    Write-Host "$Timestamp - $Message"
}

function Get-VSCodeChatData {
    # VS Code stores chat data in user data directory
    $VSCodeUserData = "$env:APPDATA\Code\User\globalStorage\github.copilot-chat"
    $ChatHistoryPath = "$env:APPDATA\Code\User\workspaceStorage"
    
    # Look for chat-related files
    $ChatFiles = @()
    
    if (Test-Path $VSCodeUserData) {
        $ChatFiles += Get-ChildItem -Path $VSCodeUserData -Recurse -Include "*.json", "*.log" -ErrorAction SilentlyContinue
    }
    
    if (Test-Path $ChatHistoryPath) {
        # Look for workspace-specific chat data
        Get-ChildItem -Path $ChatHistoryPath -Directory | ForEach-Object {
            $WorkspaceChat = Join-Path $_.FullName "github.copilot-chat"
            if (Test-Path $WorkspaceChat) {
                $ChatFiles += Get-ChildItem -Path $WorkspaceChat -Recurse -Include "*.json", "*.log" -ErrorAction SilentlyContinue
            }
        }
    }
    
    return $ChatFiles
}

function Export-ChatToMarkdown {
    param([object]$ChatData, [string]$OutputPath)
    
    $Date = Get-Date -Format "yyyy-MM-dd"
    $FileName = "$Date`_auto-exported-session.md"
    $FilePath = Join-Path $OutputPath $FileName
    
    # Create markdown content
    $Markdown = @"
# Auto-Exported Chat Session

**Date:** $Date
**Export Time:** $(Get-Date -Format "HH:mm:ss")
**Source:** VS Code Copilot Chat Auto-Export

## Chat Data

``````json
$($ChatData | ConvertTo-Json -Depth 10)
``````

## Notes

This session was automatically exported by the chat monitoring script.
To improve this export, consider:
1. Adding manual session summaries
2. Categorizing conversations by topic
3. Adding implementation notes

---
*Auto-generated by copilot-auto-export.ps1*
"@

    $Markdown | Out-File -FilePath $FilePath -Encoding UTF8
    return $FilePath
}

function Commit-ChatExport {
    param([string]$FilePath)
    
    try {
        Set-Location $RepoPath
        
        # Check if there are changes to commit
        $GitStatus = git status --porcelain $ChatDir
        
        if ($GitStatus) {
            git add $ChatDir
            $CommitMessage = "Auto-export Copilot chat session - $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
            git commit -m $CommitMessage
            
            Write-Log "Committed chat export: $FilePath"
            
            # Optionally push to remote (uncomment next line if desired)
            # git push origin main
        } else {
            Write-Log "No new chat data to commit"
        }
    }
    catch {
        Write-Log "Error committing changes: $($_.Exception.Message)"
    }
}

function Start-ChatMonitoring {
    Write-Log "Starting Copilot chat monitoring..."
    Write-Log "Repository: $RepoPath"
    Write-Log "Chat directory: $ChatDocsPath"
    Write-Log "Check interval: $IntervalMinutes minutes"
    
    $LastCheckTime = Get-Date
    
    while ($true) {
        try {
            Write-Log "Checking for new chat data..."
            
            # Get chat files modified since last check
            $ChatFiles = Get-VSCodeChatData | Where-Object { 
                $_.LastWriteTime -gt $LastCheckTime 
            }
            
            if ($ChatFiles.Count -gt 0) {
                Write-Log "Found $($ChatFiles.Count) modified chat files"
                
                # Process each file
                foreach ($File in $ChatFiles) {
                    try {
                        $Content = Get-Content $File.FullName -Raw | ConvertFrom-Json -ErrorAction SilentlyContinue
                        if ($Content) {
                            $ExportedFile = Export-ChatToMarkdown -ChatData $Content -OutputPath $ChatDocsPath
                            Write-Log "Exported chat data to: $ExportedFile"
                        }
                    }
                    catch {
                        Write-Log "Error processing file $($File.FullName): $($_.Exception.Message)"
                    }
                }
                
                # Commit the changes
                Commit-ChatExport -FilePath $ChatDocsPath
            }
            
            $LastCheckTime = Get-Date
            Write-Log "Next check in $IntervalMinutes minutes..."
            Start-Sleep -Seconds ($IntervalMinutes * 60)
        }
        catch {
            Write-Log "Error in monitoring loop: $($_.Exception.Message)"
            Start-Sleep -Seconds 60  # Wait 1 minute before retrying
        }
    }
}

# Main execution
if ($args.Count -eq 0 -or $args[0] -eq "start") {
    Start-ChatMonitoring
} elseif ($args[0] -eq "test") {
    Write-Log "Testing chat data detection..."
    $ChatFiles = Get-VSCodeChatData
    Write-Log "Found $($ChatFiles.Count) chat-related files:"
    $ChatFiles | ForEach-Object { Write-Log "  - $($_.FullName)" }
} else {
    Write-Host @"
Usage: .\copilot-auto-export.ps1 [command]

Commands:
  start    - Start monitoring (default)
  test     - Test chat data detection
  
Parameters:
  -RepoPath          Repository path (default: current ScreenAlert path)
  -ChatDir           Chat directory relative to repo (default: docs\copilot-chats)
  -IntervalMinutes   Check interval in minutes (default: 30)

Example:
  .\copilot-auto-export.ps1 -IntervalMinutes 15
"@
}
