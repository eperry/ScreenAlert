name: Build and Release ScreenAlert

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.4.2)'
        required: true
        default: 'v1.4.2'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'screenalert_requirements.txt'
        
    # Multi-layer caching strategy for maximum speed
    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\pip\Cache
          C:\Users\runneradmin\AppData\Local\pip\Cache
        key: pip-cache-${{ runner.os }}-${{ hashFiles('screenalert_requirements.txt') }}
        restore-keys: |
          pip-cache-${{ runner.os }}-
          
    - name: Cache Nuitka compilation artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuitka
          ~\AppData\Local\Nuitka
          C:\Users\runneradmin\AppData\Local\Nuitka
          .\screenalert.build
          .\screenalert.dist
          .\screenalert.onefile-build
        key: nuitka-build-${{ runner.os }}-${{ hashFiles('screenalert.py', 'screenalert_requirements.txt') }}-${{ hashFiles('screenalert_config.json') }}
        restore-keys: |
          nuitka-build-${{ runner.os }}-${{ hashFiles('screenalert.py', 'screenalert_requirements.txt') }}-
          nuitka-build-${{ runner.os }}-
          
    - name: Cache compiled Python modules
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\Programs\Python\Python311\Lib\site-packages
          C:\hostedtoolcache\windows\Python\3.11*\x64\Lib\site-packages
        key: python-modules-${{ runner.os }}-${{ hashFiles('screenalert_requirements.txt') }}
        restore-keys: |
          python-modules-${{ runner.os }}-
          
    - name: Cache Nuitka downloaded dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\Nuitka\Nuitka\Cache
          C:\Users\runneradmin\AppData\Local\Nuitka\Nuitka\Cache
        key: nuitka-deps-${{ runner.os }}-${{ hashFiles('screenalert_requirements.txt') }}
        restore-keys: |
          nuitka-deps-${{ runner.os }}-
          
    - name: Cache pre-compiled Nuitka modules
      uses: actions/cache@v4
      with:
        path: |
          .nuitka-precompiled
          ~\AppData\Local\Nuitka\Cache\downloads
          C:\Users\runneradmin\AppData\Local\Nuitka\Cache\downloads
        key: nuitka-precompiled-${{ runner.os }}-${{ hashFiles('screenalert_requirements.txt') }}
        restore-keys: |
          nuitka-precompiled-${{ runner.os }}-
        
    - name: Install dependencies (optimized with caching)
      run: |
        python -m pip install --upgrade pip --no-warn-script-location
        
        # Install project dependencies with caching awareness
        Write-Host "Installing project dependencies..."
        pip install -r screenalert_requirements.txt --no-warn-script-location
        
    - name: Build with Nuitka (robust build process)
      env:
        SIGNING_CERTIFICATE: ${{ secrets.SIGNING_CERTIFICATE }}
        SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
      run: |
        Write-Host "Building ScreenAlert with robust Nuitka build..." -ForegroundColor Green
        python build_nuitka.py
        
    - name: Create release archive
      run: |
        # Create release directory
        New-Item -ItemType Directory -Force -Path "ScreenAlert-${{ github.event.inputs.version || github.ref_name }}"
        Copy-Item "dist-nuitka/ScreenAlert.exe" "ScreenAlert-${{ github.event.inputs.version || github.ref_name }}/"
        Copy-Item "README.md" "ScreenAlert-${{ github.event.inputs.version || github.ref_name }}/"
        Copy-Item "screenalert_config.json" "ScreenAlert-${{ github.event.inputs.version || github.ref_name }}/"
        
        # Create ZIP archive
        Compress-Archive -Path "ScreenAlert-${{ github.event.inputs.version || github.ref_name }}" -DestinationPath "ScreenAlert-${{ github.event.inputs.version || github.ref_name }}.zip"
        
    - name: Calculate file hashes
      run: |
        Get-FileHash "ScreenAlert-${{ github.event.inputs.version || github.ref_name }}.zip" -Algorithm SHA256 | Format-Table -AutoSize > hashes.txt
        Get-FileHash "dist-nuitka/ScreenAlert.exe" -Algorithm SHA256 | Format-Table -AutoSize >> hashes.txt
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ScreenAlert-${{ github.event.inputs.version || github.ref_name }}
        path: ScreenAlert-${{ github.event.inputs.version || github.ref_name }}.zip
        
    - name: Upload standalone EXE
      uses: actions/upload-artifact@v4
      with:
        name: ScreenAlert-EXE-${{ github.event.inputs.version || github.ref_name }}
        path: dist-nuitka/ScreenAlert.exe
        
    - name: Upload file hashes
      uses: actions/upload-artifact@v4
      with:
        name: file-hashes
        path: hashes.txt

  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release with GitHub CLI
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        
        # Create release notes
        cat << EOF > release_notes.md
        # ScreenAlert $VERSION - Antivirus-Safe Native Executable
        
        ## üõ°Ô∏è Zero Antivirus False Positives
        Built with Nuitka for native C++ compilation - completely eliminates PyInstaller antivirus issues.
        
        ## üì¶ Downloads
        
        **ScreenAlert-$VERSION.zip** (~78MB)
        - Complete package with executable, configuration, and documentation
        - Recommended for first-time users
        
        **ScreenAlert.exe** (~77MB)
        - Standalone executable for simple download
        - Perfect for updates or advanced users
        
        ## üîí Security
        - Native C++ compiled executable
        - SHA256 hashes provided for integrity verification
        - Zero known antivirus false positives
        
        ## üìã What's New in v1.4.2.1
        - ‚úÖ Added Windows data directory support (config stored in %APPDATA%\\ScreenAlert)
        - ‚úÖ Implemented single instance protection (prevents multiple app instances)
        - ‚úÖ Enhanced deployment with standalone EXE artifact
        - ‚úÖ Automatic migration of existing configurations
        - ‚úÖ Improved professional deployment readiness
        
        ## üöÄ Installation
        
        **Complete Package (Recommended):**
        1. Download ScreenAlert-$VERSION.zip
        2. Extract to desired location
        3. Run ScreenAlert.exe
        
        **Standalone Executable:**
        1. Download ScreenAlert.exe
        2. Run directly (config will be created automatically)
        
        Configuration and screen captures are now stored in your Windows user data directory for better organization.
        EOF
        
        # Create the release
        gh release create "$VERSION" \
          --title "ScreenAlert $VERSION - Native Executable" \
          --notes-file release_notes.md \
          --draft=false \
          --prerelease=false \
          "./ScreenAlert-$VERSION/ScreenAlert-$VERSION.zip#ScreenAlert-$VERSION.zip" \
          "./ScreenAlert-EXE-$VERSION/ScreenAlert.exe#ScreenAlert.exe" \
          "./file-hashes/hashes.txt#SHA256-Hashes.txt"