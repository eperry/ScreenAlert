name: Build and Release ScreenAlert

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (optional)'
        required: false
        type: string
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform_name: "Windows"
            requirements_file: "screenalert_requirements.txt"
            executable_suffix: ".exe"
          - os: ubuntu-latest
            platform_name: "Linux"
            requirements_file: "screenalert_requirements_linux.txt"
            executable_suffix: ""
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Linux system dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y wmctrl x11-utils python3-tk python3-dev
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: '${{ matrix.requirements_file }}'
    
    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\pip\Cache
          C:\Users\runneradmin\AppData\Local\pip\Cache
          ~/.cache/pip
        key: pip-cache-${{ runner.os }}-${{ hashFiles(matrix.requirements_file) }}
        restore-keys: |
          pip-cache-${{ runner.os }}-
    
    - name: Cache Nuitka compilation artifacts  
      uses: actions/cache@v4
      with:
        path: |
          ~/.nuitka
          ~\AppData\Local\Nuitka
          C:\Users\runneradmin\AppData\Local\Nuitka
          .\screenalert.build
          .\screenalert.dist
          .\screenalert.onefile-build
        key: nuitka-build-${{ runner.os }}-${{ hashFiles('screenalert.py', matrix.requirements_file) }}-${{ hashFiles('screenalert_config.json') }}
        restore-keys: |
          nuitka-build-${{ runner.os }}-${{ hashFiles('screenalert.py', matrix.requirements_file) }}-
          nuitka-build-${{ runner.os }}-
    
    - name: Cache compiled Python modules
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\Programs\Python\Python311\Lib\site-packages
          C:\hostedtoolcache\windows\Python\3.11*\x64\Lib\site-packages
          ~/.local/lib/python3.11/site-packages
          /opt/hostedtoolcache/Python/3.11*/x64/lib/python3.11/site-packages
        key: python-modules-${{ runner.os }}-${{ hashFiles(matrix.requirements_file) }}
        restore-keys: |
          python-modules-${{ runner.os }}-
    
    - name: Cache Nuitka downloaded dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\Nuitka\Nuitka\Cache
          C:\Users\runneradmin\AppData\Local\Nuitka\Nuitka\Cache
          ~/.cache/Nuitka
        key: nuitka-deps-${{ runner.os }}-${{ hashFiles(matrix.requirements_file) }}
        restore-keys: |
          nuitka-deps-${{ runner.os }}-
    
    - name: Cache pre-compiled Nuitka modules
      uses: actions/cache@v4
      with:
        path: |
          .nuitka-precompiled
          ~\AppData\Local\Nuitka\Cache\downloads
          C:\Users\runneradmin\AppData\Local\Nuitka\Cache\downloads
          ~/.cache/Nuitka/downloads
        key: nuitka-precompiled-${{ runner.os }}-${{ hashFiles(matrix.requirements_file) }}
        restore-keys: |
          nuitka-precompiled-${{ runner.os }}-

    - name: Install dependencies (optimized with caching)
      run: |
        # Upgrade pip and install Python packages
        python -m pip install --upgrade pip wheel setuptools
        pip install -r ${{ matrix.requirements_file }}
        pip install nuitka

    - name: Build with Nuitka (robust build process)
      env:
        SIGNING_CERTIFICATE: ${{ secrets.SIGNING_CERTIFICATE }}
        SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
      run: |
        cd build
        python build_nuitka.py
    
    - name: Create release archive
      run: |
        if (Test-Path "dist-nuitka/ScreenAlert${{ matrix.executable_suffix }}") {
          Write-Host "✅ Build successful! Creating release archive..."
          Compress-Archive -Path "dist-nuitka/*" -DestinationPath "ScreenAlert-${{ matrix.platform_name }}-${{ github.event.inputs.version || github.ref_name }}.zip"
          Get-ChildItem -Filter "*.zip" | Format-List
        } else {
          Write-Host "❌ Build failed - executable not found"
          exit 1
        }
      shell: powershell
      if: matrix.os == 'windows-latest'
    
    - name: Create release archive (Linux)
      run: |
        if [ -f "dist-nuitka/ScreenAlert${{ matrix.executable_suffix }}" ]; then
          echo "✅ Build successful! Creating release archive..."
          cd dist-nuitka
          zip -r "../ScreenAlert-${{ matrix.platform_name }}-${{ github.event.inputs.version || github.ref_name }}.zip" .
          cd ..
          ls -la *.zip
        else
          echo "❌ Build failed - executable not found"
          exit 1
        fi
      if: matrix.os == 'ubuntu-latest'
    
    - name: Calculate file hashes
      run: |
        if (Test-Path "ScreenAlert-${{ matrix.platform_name }}-${{ github.event.inputs.version || github.ref_name }}.zip") {
          Write-Host "📋 Calculating file hashes..."
          Get-FileHash "ScreenAlert-${{ matrix.platform_name }}-${{ github.event.inputs.version || github.ref_name }}.zip" -Algorithm SHA256 >> hashes.txt
          if (Test-Path "dist-nuitka/ScreenAlert${{ matrix.executable_suffix }}") {
            Get-FileHash "dist-nuitka/ScreenAlert${{ matrix.executable_suffix }}" -Algorithm SHA256 >> hashes.txt
          }
          Write-Host "File Hashes:" 
          Get-Content hashes.txt
        }
      shell: powershell
      if: matrix.os == 'windows-latest'
    
    - name: Calculate file hashes (Linux)
      run: |
        if [ -f "ScreenAlert-${{ matrix.platform_name }}-${{ github.event.inputs.version || github.ref_name }}.zip" ]; then
          echo "📋 Calculating file hashes..."
          sha256sum "ScreenAlert-${{ matrix.platform_name }}-${{ github.event.inputs.version || github.ref_name }}.zip" >> hashes.txt
          if [ -f "dist-nuitka/ScreenAlert${{ matrix.executable_suffix }}" ]; then
            sha256sum "dist-nuitka/ScreenAlert${{ matrix.executable_suffix }}" >> hashes.txt
          fi
          echo "File Hashes:"
          cat hashes.txt
        fi
      if: matrix.os == 'ubuntu-latest'
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ScreenAlert-${{ matrix.platform_name }}-${{ github.event.inputs.version || github.ref_name }}
        path: ScreenAlert-${{ matrix.platform_name }}-${{ github.event.inputs.version || github.ref_name }}.zip
        if-no-files-found: error
        retention-days: 30
    
    - name: Upload standalone executable
      uses: actions/upload-artifact@v4
      with:
        name: ScreenAlert-${{ matrix.platform_name }}-EXE-${{ github.event.inputs.version || github.ref_name }}
        path: dist-nuitka/ScreenAlert${{ matrix.executable_suffix }}
        if-no-files-found: error
        retention-days: 30
    
    - name: Upload file hashes
      uses: actions/upload-artifact@v4
      with:
        name: file-hashes
        path: hashes.txt
        if-no-files-found: warn
        retention-days: 90
